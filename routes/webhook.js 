const express = require("express");
const router = express.Router();

const { askAI, validateNameWithAI } = require("../services/aiService");
const {
  sendTextMessage,
  sendAppointmentOptions,
} = require("../services/whatsappService");
const { saveBooking } = require("../services/sheetsService");
const { normalizePhoneNumber } = require("../utils/helpers");

const VERIFY_TOKEN = process.env.VERIFY_TOKEN || "my_secret";

let tempBookings = {};

router.get("/", (req, res) => {
  const mode = req.query["hub.mode"];
  const token = req.query["hub.verify_token"];
  const challenge = req.query["hub.challenge"];

  if (mode && token === VERIFY_TOKEN) return res.status(200).send(challenge);
  res.sendStatus(403);
});

router.post("/", async (req, res) => {
  try {
    const body = req.body;
    const message = body.entry?.[0]?.changes?.[0]?.value?.messages?.[0];
    const from = message?.from;
    if (!message || !from) return res.sendStatus(200);

    const text = message?.text?.body?.trim();
    if (!text) return res.sendStatus(200);

    console.log(`💬 Message from ${from}:`, text);

    // ✅ Logic for booking flow
    if (text.includes("حجز") || text.toLowerCase().includes("book")) {
      await sendAppointmentOptions(from);
      return res.sendStatus(200);
    }

    // ✅ handle user flow
    const booking = tempBookings[from] || {};

    if (!booking.appointment && ["3", "6", "9"].includes(text)) {
      booking.appointment = `${text} PM`;
      tempBookings[from] = booking;
      await sendTextMessage(from, "👍 أرسل اسمك الآن:");
      return res.sendStatus(200);
    }

    if (!booking.name) {
      const valid = await validateNameWithAI(text);
      if (!valid) {
        await sendTextMessage(from, "⚠️ الرجاء إدخال اسم حقيقي.");
        return res.sendStatus(200);
      }
      booking.name = text;
      await sendTextMessage(from, "📱 أرسل رقم هاتفك:");
      return res.sendStatus(200);
    }

    if (!booking.phone) {
      const phone = normalizePhoneNumber(text);
      if (!phone) {
        await sendTextMessage(from, "⚠️ رقم الهاتف غير صالح.");
        return res.sendStatus(200);
      }
      booking.phone = phone;
      await sendTextMessage(from, "💊 أرسل نوع الخدمة المطلوبة:");
      return res.sendStatus(200);
    }

    if (!booking.service) {
      booking.service = text;
      await saveBooking(booking);
      await sendTextMessage(
        from,
        `✅ تم حفظ حجزك بنجاح:
👤 ${booking.name}
📱 ${booking.phone}
💊 ${booking.service}
📅 ${booking.appointment}`
      );
      delete tempBookings[from];
      return res.sendStatus(200);
    }

    const reply = await askAI(text);
    await sendTextMessage(from, reply);
    res.sendStatus(200);
  } catch (err) {
    console.error("❌ Webhook Error:", err.message);
    res.sendStatus(500);
  }
});

module.exports = router;
